# # 0% [█ █ █ █ █ █ █ █ █ █] 100% 

# # 0% [█ █ █ █ █ █ █ █ █ █] 100% 

import requests
import json
import time
import argparse
import sys
import signal

class Bcolors:
    Green = '\033[92m'
    Red = '\033[91m'
    Yellow = '\033[93m'
    Blue = '\033[94m'
    Magenta = '\033[95m'
    Cyan = '\033[96m'
    White = '\033[0m'
    Endc = '\033[0m'  # Reset color to default

# Replace '__version__' with your actual version number
__version__ = '2.1'  # Replace with your version number

# Your name (replace 'YourName' with your actual name)
your_name = 'MalwareAnalyzer'

decorative_line = f"\n{Bcolors.White}  {'»' * 78}  {Bcolors.Endc}\n"
decorative_line1 = f"\n{Bcolors.Green}  {'»' * 78}  {Bcolors.Endc}\n"
# Print statement
print(decorative_line)
print(f'            {Bcolors.Green}▌║█║▌│║▌│║▌║▌█║ {Bcolors.Red}{your_name}{Bcolors.White} v{__version__}{Bcolors.Green} ▌│║▌║▌│║║▌█║▌║█{Bcolors.Endc}\n')
print(f"             {Bcolors.White}D E V E L O P E D  B Y  K U N A L  N A M D A S{Bcolors.Endc}")
print(decorative_line1)

# Define your VirusTotal API key here
API_KEY = '1080008869389fe6fd843060839e4d6e1ccee4958d235794434287dcf6a33e86'

# Define the base URLs for the VirusTotal API
BASE_URL_FILE_REPORT = 'https://www.virustotal.com/api/v3/files/{id}'
BASE_URL_FILE_UPLOAD = 'https://www.virustotal.com/api/v3/files'
BASE_URL_URL_SCAN = 'https://www.virustotal.com/api/v3/urls'
BASE_URL_URL_REPORT = 'https://www.virustotal.com/api/v3/analyses/{id}'
BASE_URL_DOMAIN_REPORT = 'https://www.virustotal.com/api/v3/domains/{domain}'
BASE_URL_IP_REPORT = 'https://www.virustotal.com/api/v3/ip_addresses/{ip}'

def signal_handler(sig, frame):
    print(f"\n{Bcolors.Red}Program exited successfully.{Bcolors.Endc}")
    sys.exit(0)

signal.signal(signal.SIGINT, signal_handler)

def get_hash_info(file_hash):
    try:
        url = BASE_URL_FILE_REPORT.format(id=file_hash)
        headers = {"x-apikey": API_KEY}
        response = requests.get(url, headers=headers)
        response.raise_for_status()
        return response.json()
    except requests.exceptions.RequestException as e:
        print(f"Error: {e}")
        return None

def get_url_info(url_id):
    try:
        url = BASE_URL_URL_REPORT.format(id=url_id)
        headers = {"x-apikey": API_KEY}
        response = requests.get(url, headers=headers)
        response.raise_for_status()
        return response.json()
    except requests.exceptions.RequestException as e:
        print(f"Error: {e}")
        return None

def get_domain_info(domain):
    try:
        url = BASE_URL_DOMAIN_REPORT.format(domain=domain)
        headers = {"x-apikey": API_KEY}
        response = requests.get(url, headers=headers)
        response.raise_for_status()
        return response.json()
    except requests.exceptions.RequestException as e:
        print(f"Error: {e}")
        return None

def get_ip_info(ip):
    try:
        url = BASE_URL_IP_REPORT.format(ip=ip)
        headers = {"x-apikey": API_KEY}
        response = requests.get(url, headers=headers)
        response.raise_for_status()
        return response.json()
    except requests.exceptions.RequestException as e:
        print(f"Error: {e}")
        return None

def upload_file(file_path):
    try:
        headers = {"x-apikey": API_KEY}
        with open(file_path, 'rb') as file:
            response = requests.post(BASE_URL_FILE_UPLOAD, headers=headers, files={"file": file})
        response.raise_for_status()
        return response.json()
    except requests.exceptions.RequestException as e:
        print(f"Error: {e}")
        return None

def scan_url(url):
    try:
        headers = {"x-apikey": API_KEY}
        response = requests.post(BASE_URL_URL_SCAN, headers=headers, data={"url": url})
        response.raise_for_status()
        return response.json()
    except requests.exceptions.RequestException as e:
        print(f"Error: {e}")
        return None

def analyze_url(url):
    scan_response = scan_url(url)
    if scan_response:
        url_id = scan_response.get('data', {}).get('id')
        if url_id:
            return get_url_info(url_id)
    return None

def save_output_to_file(output, file_path, file_format):
    try:
        with open(file_path, 'w') as file:
            if file_format == 'json':
                json.dump(output, file, indent=2)
            elif file_format == 'text':
                file.write(json.dumps(output, indent=2))
        print(f"Output saved to {file_path}")
    except Exception as e:
        print(f"Error saving output to file: {e}")

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='VirusTotal File, URL, Domain, and IP Analyzer')
    parser.add_argument('-t', '--type', choices=['file', 'url', 'hash', 'domain', 'ip'], required=True, help='Type of input: file, url, hash, domain, or ip')
    parser.add_argument('-i', '--input', required=True, help='File path, URL, hash value, domain name, or IP address')
    parser.add_argument('-o', '--output', help='Path to save the output')
    parser.add_argument('-f', '--format', choices=['json', 'text'], default='json', help='Format of the output file (json or text)')
    parser.add_argument('--verbose', action='store_true', help='Print verbose output')
    args = parser.parse_args()
    
    try:
        if args.type == 'file':
            result = upload_file(args.input)
        elif args.type == 'url':
            result = analyze_url(args.input)
        elif args.type == 'hash':
            result = get_hash_info(args.input)
        elif args.type == 'domain':
            result = get_domain_info(args.input)
        elif args.type == 'ip':
            result = get_ip_info(args.input)
        
        if result:
            print(f"{Bcolors.Blue}                A N A L Y S I S   I N F O R M A T I O N                {Bcolors.Endc}")
            for line in json.dumps(result, indent=2).splitlines():
                print(f"{Bcolors.Green}{line}{Bcolors.Endc}")
                time.sleep(0.10)
            
            if args.output:
                save_output_to_file(result, args.output, args.format)
            
            if args.verbose:
                print(f"\n{Bcolors.Yellow}Verbose Output:{Bcolors.Endc}")
                print(f"Total number of results: {len(result)}")
                print(f"Result keys: {', '.join(result.keys())}")
        else:
            print("No information available.")
    except Exception as e:
        print(f"An error occurred: {e}")
